Dapr:
  enabled: true
Keda:
  enabled: true
KnativeServing:
  enabled: true
TektonPipelines:
  enabled: true
ShipwrightBuild:
  enabled: true
IngressNginx:
  enabled: true

config:
  knativeServingConfigFeaturesName: config-features
  knativeServingNamespace: knative-serving
  pluginsTracing: |
    enabled: false
    # Provider name can be set to "skywalking", "opentelemetry"
    # A valid provider must be set if tracing is enabled.
    provider:
      name: "skywalking"
      oapServer: "localhost:xxx"
    # Custom tags to add to tracing
    tags:
      func: function-with-tracing
      layer: faas
      tag1: value1
      tag2: value2
    baggage:
    # baggage key is `sw8-correlation` for skywalking and `baggage` for opentelemetry
    # Correlation context for skywalking: https://skywalking.apache.org/docs/main/latest/en/protocols/skywalking-cross-process-correlation-headers-protocol-v1/
    # baggage for opentelemetry: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/baggage/api.md
    # W3C Baggage Specification/: https://w3c.github.io/baggage/
      key: sw8-correlation # key should be baggage for opentelemetry
      value: "base64(string key):base64(string value),base64(string key2):base64(string value2)"
controllerManager:
  kubeRbacProxy:
    image:
      repository: openfunction/kube-rbac-proxy
      tag: v0.8.0
  openfunction:
    image:
      repository: openfunction/openfunction
      tag: latest
    resources:
      limits:
        cpu: 500m
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 20Mi
  replicas: 1
kubernetesClusterDomain: cluster.local
managerConfig:
  controllerManagerConfigYaml:
    health:
      healthProbeBindAddress: :8081
    leaderElection:
      leaderElect: true
      resourceName: 79f0111e.openfunction.io
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
metricsService:
  ports:
    - name: https
      port: 8443
      targetPort: https
  type: ClusterIP
webhookServerCert:
  tlsCrt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQvVENDQXVXZ0F3SUJBZ0lVQnV6QmJ6WDloSHlNL0tCNFpveFBhRmxkNWlvd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0tqRW9NQ1lHQTFVRUF3d2ZZMkV0YjNCbGJtWjFibU4wYVc5dUxYZGxZbWh2YjJzdGMyVnlkbWxqWlRBZQpGdzB5TWpBME1EY3dNelV3TURaYUZ3MHpNakEwTURRd016VXdNRFphTUNjeEpUQWpCZ05WQkFNTUhHOXdaVzVtCmRXNWpkR2x2YmkxM1pXSm9iMjlyTFhObGNuWnBZMlV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURIK3BWZ1VKajJqbnNuZE03ay9VVFJwaWUwZHdWSHNYV2VOV0hwZEtQN2NXZVZqVlRLZHB5OApQdjBaQ3FjTlppQXlTUTNMcWJ0ejNLc0VUR3pxT091cDRyWUhTSDRMamJzSUtObGVZN0lmQkVkdFZ1Nlc0NjBPClkySVEvYmNWNU00R2xOb0RNdXd0azNHWGlsK3hNQkx0NUNFeHg5VGNXTmxrZzFrOFFlYWh6UUpxakJwNTFkTU8KSXprQVF4SGdmaUV3WXZPdjg4SmxGdDJvQkh1RHpCYWVzRnFlRTA3ck5BT3NnQmgvNEJXMmxva1pkODY3YnZPSgp4MjUybk9CbWxtWEFieG9ldGtHRlEzZnM4b0VaeWVCS0haWXhVYmVxSG9xaUlxaGFrZEUyajFjTVc4S1FEK3ZSCmFFMnZKMWlEc2lHQjQ5cENtMGhDL0lHeFVwM2I3SFBOQWdNQkFBR2pnZ0VjTUlJQkdEQUpCZ05WSFJNRUFqQUEKTUFzR0ExVWREd1FFQXdJRjREQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJS3dZQkJRVUhBd0V3Z2Q0RwpBMVVkRVFTQjFqQ0IwNEljYjNCbGJtWjFibU4wYVc5dUxYZGxZbWh2YjJzdGMyVnlkbWxqWllJcGIzQmxibVoxCmJtTjBhVzl1TFhkbFltaHZiMnN0YzJWeWRtbGpaUzV2Y0dWdVpuVnVZM1JwYjI2Q0xXOXdaVzVtZFc1amRHbHYKYmkxM1pXSm9iMjlyTFhObGNuWnBZMlV1YjNCbGJtWjFibU4wYVc5dUxuTjJZNEk3YjNCbGJtWjFibU4wYVc5dQpMWGRsWW1odmIyc3RjMlZ5ZG1salpTNXZjR1Z1Wm5WdVkzUnBiMjR1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDCkhHOXdaVzVtZFc1amRHbHZiaTEzWldKb2IyOXJMWE5sY25acFkyVXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQUkxQnVhSlM5WUxHOUlYSU0rSUVYU3p5bW80N3BpVzkrQS8wQUtrK0RnVUpPMEZURDJqZEtQNkZ5WTB2VDJxRQo5OTNxZE5XZXdSdHQ4N1ZxUmQvVHNRQWVnMHhZZWxURUVOb0RBZjYzSEIzWEY2b0JmUHRkaU1XMGgxSnYwendsCjdRN2cxZTZNVDBaN0Zxb21ZQ1VFOC8zTG1oMHhWcTNHL1cvS0Fnd1JCQkZlekl4WlM5NVg3UkJsVkdoSkI5WnoKTmY3cmtEVDhwOFpnZ3JjZUE4RHNYM3lPMEF4cGVuS0RVRUNQR1doQVVESG1pVmFURURoZU1Vd3pyZCtIWUdqYwpnenR2Y0RXMGJSWkVJWDJsQUZDWHFESUhPNGRiODNxT2FFdHh2SlhyY1NvdEgvUnVmV1p0RWc0bjhqN0E0L0c5CjVqWjhVSTE4bXFoM1RmNnpzd0lhQUk4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tlsKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeC9xVllGQ1k5bzU3SjNUTzVQMUUwYVludEhjRlI3RjFualZoNlhTaiszRm5sWTFVCnluYWN2RDc5R1FxbkRXWWdNa2tOeTZtN2M5eXJCRXhzNmpqcnFlSzJCMGgrQzQyN0NDalpYbU95SHdSSGJWYnUKbHVPdERtTmlFUDIzRmVUT0JwVGFBekxzTFpOeGw0cGZzVEFTN2VRaE1jZlUzRmpaWklOWlBFSG1vYzBDYW93YQplZFhURGlNNUFFTVI0SDRoTUdMenIvUENaUmJkcUFSN2c4d1duckJhbmhOTzZ6UURySUFZZitBVnRwYUpHWGZPCnUyN3ppY2R1ZHB6Z1pwWmx3RzhhSHJaQmhVTjM3UEtCR2NuZ1NoMldNVkczcWg2S29pS29XcEhSTm85WERGdkMKa0EvcjBXaE5yeWRZZzdJaGdlUGFRcHRJUXZ5QnNWS2QyK3h6elFJREFRQUJBb0lCQVFDaEw4RW5HTSt5SzdYbwpYNlpEdkVDMEd4RDF6TmxjcUJUOXFGbDdLcURpRXM1REpOK3JNVit6KzdGVmRkaWdYQ2luWDJyWE5iLzU2MnVNCjAyMFdmVHEyZkIzc1VPb0h0ZjJDM2lvV2dwVVhtd05YaGpKWlBMcElWcUs4djBQTFNka21ST1JVbjc3dUhXSDUKbTNiMkFxRy9UWm5UM2hZY1pTRVVleXA1LzBRK05PcWF2RVVGMG40WW9ua3FsSnQ5RnlMbnJkaVk1VjVqYVZCWQovYmNTZGJIV2tpb3NISDdIU0NYYjVwNW8xY3d6cjNxUWlCRmU3QUs2VXFPUTdIb2Y2cUZjeW5xT1M2NVpHZG9uClVPTXJ0ZnRPL1VkakFZQzdvSWxLNU1KcE0wT3pQZlY1Z1hhS1BzZnhtcFlUTGszQ1lJSGcyVlJIc2RGaHdzT2IKTGRKYklBVUJBb0dCQVBKUG9RdysweEN6ZklxdlYvSnoyVlJCQW9OMEtGVGV0KzBEaDBicTYySzJ1TUc4MlNMTAp2UThUeHNzWFVMNlFZaUR6cG10WllaSHhOM0l1M3E0TGFzbCtNbWNYK0FDeUozZGdYUm9zMmhhay9NNkJ2elAvCkh3eWdrQWc3OXRLLzhmNzFFZkVzWVlDVHB5UXFDaldGQWJLdUMzWmFlQTNIUDJYRU5EcjlNYjVWQW9HQkFOTkcKdSttQlE4djBONkpac1BvS3FKbWI1cFVJV3pydENUTmt6SWR5eUVHMUFPL3RhRlZ2QnNTb0srVmo5dkxyd3BYNQpYOXdVYUh1OE5IOTJKcGNaUnRJbTlvZEFQMzJoeXVyeXpsZndIRGtmeTFhWGMvSDd0aWRnYy9pa1ZkZkhJZVZwClFQcGo3VXN0Smd0QVVHelpVclJmOGdnRUxYOVNiYVNRQmo2SnArZVpBb0dCQU1MaXRKN0tzS3RRRUt6aVZoUFUKaFVrMGVEY041NXBLL3hjTHJYT21ZZWNsR3ZnSFVZU2c1TkFKa2V1cU52RHQ0MTZwV0lJaWcwMEQreHBGQkNocgpXbG53dTgwYkJBWmJRMDdLSEZkL0YzRDdCYkY1dlRTdXptUXpoMlI0Qmc1Ky9yMldrZld0UWtaTmV6S2s5VTBTClNzbFJIanIwakhaWWVHNzdIUjhNb1VONUFvR0FFMGpia2g3SWIyOWxQSjV2TndPT0RDZGN6ckdxa2lCY3ZLSXcKd1JSTER5UlVaNUlGK2ZaZWFjam42TkpORWpOTzJaMmZrRmtVaUdiUGErcis3ci9SNVJERlkrY0xaSTVHRlZnQQpXYXFEQ1B2TDlhVnhZZDhWNjFZMGY3ZVFWbGZJMGtYZk5udTBoeTRoME5rWC9qZUFBeExXNXNCcTNycEpZOEg1CnIrK2tzZEVDZ1lBRkp2VkpWZDd0NjdVWTl6WXlaN0NvU00vYnZIMXFGVzZKbFQzcENyekYvUVh1TksyaUh3Y00KMWdNYUc4MnJ6OGIyS2ZEYTRZRTlEWnVXRVNQMENLdkRsTGZlempxUEFaaFZId09RTzR5RjBDS1ZucUFjWm9vMgo5Qi84dEhFTFFBdWMzZlI2WUVuV29hWCtIb1prYTBZaE5sVXBUdWxnUHJHVUl0TTFJVGVlVlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
webhookService:
  ports:
    - port: 443
      targetPort: 9443
  type: ClusterIP
